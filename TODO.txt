20-04-2023
==========
1. json schema. Конвертація схеми в SQL синтаксис міграції та в типи TS.
2. https://github.com/salsita/node-pg-migrate як варіант.
3. https://www.npmjs.com/package/sql-template-strings для SQL запитів.
4. Валідація: сервер на апі та з апі, валідація на фронті від/на сервер,
   не на продакшині валідація для з/в базу та контрактів між доменной логікой.
5. Common загальний для беку та фронті для: схем, валідацію, типи TS та інше.
6. Oauth2 редірект та колбек на фронті, далі отримання токена на фронті або
   відправлення коду на бек і там пост запит на отримання токену.

27-04-2023
==========
1. Тестування SQL запиту який збілдить міграція або репозіторій (модель)
2. Інтеграційне тестування: імітуємо апі запит, та відповідь перевіряємо.
3. Енд ту Енд: тестування за базою та відповідним сідом.
4. Нативні тести: node test runner, node assert.

04-05-2023
==========
1. Паттерн записи транзакції до бази, спочатку перевірка на умови запису
(наприклад user is activate) та перевірка після коміту транзакції на випадок
що умови могли змінитись за час виконання транзакції. Перевірка з урахуванням
timestamp що перше сталось в базі.

05-05-2023
==========
1. Персістен контексти для сесії користувача, та загальний контекст юзера.
   Кеш як Map або redis.

11-05-2023
==========
1. Замість ws краще використовувати HTTP2 or HTTP3
2. Подивитись реалызацію metacom, rpc and etc.
3. Щоб дійсно розуміти є з'єднання ws чи нема, треба робити ping-pong.
4. https://nodejs.org/api/events.html#capture-rejections-of-promises
   якщо async trow use EventEmitter.captureRejections = true;
5. Не використовувати once, пямять може текти
6. Структура проекту по модулям, як варіант:

   users
    - service
    - repository
    - api
    - etc

7. Транзакція
    async withTransaction<T>(fn: () => Promise<T>): Promise<T> {
        if (this.transaction) return fn();
        await this.startTransaction();
        try {
          const res = await fn();
          await this.commitTransaction();
          return res;
        } catch (err: unknown) {
          await this.rollbackTransaction();
          throw err;
        }
    }

